bash <<'EOF' || echo "Chef bootstrap failed!"

# This is the ubuntu precise bootstrap script from infochimps' ironfan. It is
# based on the opscode bootstrap script, with the important differences being it:
#
# * installs the Opscode-provided Chef client (including a self-contained Ruby 1.9.x) in /opt/chef
# * installs certain universally-useful gems into the Chef-provided Ruby gem set
# * pushes the node identity into the first-boot.json
# * installs the chef-client service and kicks off the first run of chef

<%= "export http_proxy=\"#{knife_config[:bootstrap_proxy]}\"" if knife_config[:bootstrap_proxy] -%>

set -e

<%= (@config[:verbosity].to_i > 1 ? 'set -v' : '') %>

date > /etc/box_build_time

echo -e "`date` \n\n**** \n**** apt update:\n****\n"
apt-get --force-yes -y update
apt-get --force-yes -y dist-upgrade

echo -e "`date` \n\n**** \n**** Installing base packages:\n****\n"
apt-get --force-yes -y install build-essential make wget curl runit zlib1g-dev libssl-dev openssl libcurl4-openssl-dev libxml2-dev libxslt-dev libyaml-dev libreadline6 libreadline6-dev
apt-get clean

# do not trust the ubuntu chef package
rm -f /etc/init.d/chef-client || true
apt-get   remove -y --force-yes         chef ruby1.8-dev libjson-ruby1.8 libmixlib-authentication-ruby1.8 ohai libmixlib-log-ruby1.8 libmime-types-ruby librestclient-ruby1.8 ruby1.8 ruby liberubis-ruby1.8 libsystemu-ruby1.8 libohai-ruby libuuidtools-ruby1.8 libhighline-ruby1.8 libabstract-ruby1.8 libmixlib-config-ruby1.8 rubygems1.8 libbunny-ruby1.8 libchef-ruby1.8 libmixlib-cli-ruby1.8 libyajl-ruby libmoneta-ruby1.8 libohai-ruby1.8 libextlib-ruby1.8 || true
sudo apt-get autoremove -y --force-yes || true

mkdir -p /tmp/knife-bootstrap
chmod 700 /tmp/knife-bootstrap
cd /tmp/knife-bootstrap

eval `cat /etc/lsb-release `
export DEBIAN_FRONTEND=noninteractive

# Install a self-contained Chef client because Ubuntu ships with Ruby 1.8.x,
# which is not compatible with Ironfan
echo 'gem: --no-ri --no-rdoc' > /home/ubuntu/.gemrc
echo 'gem: --no-ri --no-rdoc' > /root/.gemrc
if [ ! -f /opt/chef/bin/chef-client ]; then
  curl -L http://www.opscode.com/chef/install.sh | sudo bash
fi

# Replace /usr/local/sbin with the omnibus' bin, to get it into the PATH
mv /usr/local/sbin{,~}
ln -s /opt/chef/embedded/bin /usr/local/sbin

# Link ruby into /usr/bin/ruby, to allow /usr/bin/env 
ln -s /opt/chef/embedded/bin/ruby /usr/bin

gem install extlib bundler json right_aws pry fog

echo -e "`date` \n\n**** \n**** Knifing in the chef client config files:\n****\n"
mkdir -p /etc/chef

<%- if @config[:client_key] %>
(
cat <<'EOP'
<%= @config[:client_key] %>
EOP
) > /tmp/knife-bootstrap/client.pem
awk NF /tmp/knife-bootstrap/client.pem > /etc/chef/client.pem
<%- else %>
(
cat <<'EOP'
<%= validation_key %>
EOP
) > /tmp/knife-bootstrap/validation.pem
awk NF /tmp/knife-bootstrap/validation.pem > /etc/chef/validation.pem
<%- end %>

<% if @chef_config[:encrypted_data_bag_secret] -%>
(
cat <<'EOP'
<%= encrypted_data_bag_secret %>
EOP
) > /tmp/encrypted_data_bag_secret
awk NF /tmp/encrypted_data_bag_secret > /etc/chef/encrypted_data_bag_secret
rm /tmp/encrypted_data_bag_secret
<% end -%>

(
cat <<'EOP'
<%= config_content %>
<%= @config[:computer].chef_client_script_content %>
EOP
) > /etc/chef/client.rb

(
cat <<'EOP'
<%= { "cluster_name" => @config[:server].cluster_name, "facet_name" => @config[:server].facet_name, "facet_index" => @config[:server].index, "environment" => @config[:server].environment }.to_json%>
EOP
) > /etc/chef/first-boot.json

# Ensure that EC2 images are recognized even inside VPC
mkdir -p /etc/chef/ohai/hints/
touch /etc/chef/ohai/hints/ec2.json


echo -e "`date` \n\n**** \n**** Adding chef client nonce script:\n****\n"

cat > /etc/init.d/chef-client-nonce <<'EOP'
#! /bin/sh
### BEGIN INIT INFO
# Provides:           chef-client-nonce
# Required-Start:     $remote_fs $network
# Required-Stop:
# Default-Start:      2 3 4 5
# Default-Stop:       0 1 6
# Short-Description:  Start a single chef-client run.
### END INIT INFO
#
# Copyright (c) 2009-2010 Opscode, Inc, <legal@opscode.com>
#
# chef-client         Startup script for chef-client.
# chkconfig: - 99 02
# description: starts up chef-client once, at boot

case "$1" in
  start)
    /usr/bin/chef-client -L /var/log/chef/client.log
    exit $?
    ;;
  *)
    echo "Usage: /etc/init.d/chef-client-nonce start" >&2
    exit 1
    ;;
esac
EOP

mkdir -p /var/log/chef
chmod +x /etc/init.d/chef-client-nonce 
update-rc.d chef-client-nonce defaults

<%- if (@config[:bootstrap_runs_chef_client].to_s == 'true') || (@chef_config.knife[:bootstrap_runs_chef_client].to_s == 'true') %>
sudo service chef-client-nonce start
<%- end %>



echo -e "`date` \n\n**** \n**** Cleanup:\n****\n"
cd /
rm -r /tmp/knife-bootstrap
# make locate work good
updatedb

echo -e "`date` \n\n**** \n**** Cluster Chef client bootstrap complete\n****\n"
EOF
