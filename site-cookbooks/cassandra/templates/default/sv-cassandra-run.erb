#!/bin/sh
export JAVA_HOME=/usr/lib/jvm/java-6-sun/jre CASSANDRA_CONF=/etc/cassandra/storage-conf.xml CASSANDRA_HOME=/usr/local/share/cassandra

cassandra_home=<%= node[:cassandra][:cassandra_home] %>
cassandra_bin=${cassandra_home}/build/classes
CASSANDRA_CONF=<%= node[:cassandra][:cassandra_conf] %>
CASSANDRA_USER=<%= node[:cassandra][:cassandra_user] %>
CLASSPATH=$CASSANDRA_CONF:$cassandra_bin

for jar in $cassandra_home/lib/*.jar; do
  CLASSPATH=$CLASSPATH:$jar
done

# bump number of open files allowed way way up
ulimit -n 65535
# allow cassandra to lock itself into memory if JNA is installed
ulimit -l unlimited

exec chpst -u${CASSANDRA_USER} -e /etc/sv/cassandra/env -o 65535 \
  /usr/bin/java                                                 \
<%- if false %>
      -ea                                                       \
<%- end %>
      -XX:+UseThreadPriorities                                  \
      -XX:ThreadPriorityPolicy=42                               \
      -XX:+UseParNewGC                                          \
      -XX:+UseConcMarkSweepGC                                   \
      -XX:+CMSParallelRemarkEnabled                             \
      -XX:+HeapDumpOnOutOfMemoryError                           \
<%- [["ms", :java_min_heap], ["mx", :java_max_heap], ["mn", :java_eden_heap]].each do |opt| %>
<%-   unless node[:cassandra][opt[1]].nil? %>
      -X<%= opt[0] %><%= node[:cassandra][opt[1]] %>            \
<%-   end %>
<%- end %>
      -Xss128k                                                  \
      -XX:SurvivorRatio=4                                       \
      -XX:MaxTenuringThreshold=8                                \
      -XX:TargetSurvivorRatio=70                                \
      -XX:CMSInitiatingOccupancyFraction=65                     \
      -Dcassandra.compaction.priority=1                         \
<%- if node[:cassandra][:passwd_use_md5] %>
      -Dpasswd.mode=MD5                                         \
<%- end %>
<%- if node[:cassandra][:passwd_properties] %>
      -Dpasswd.properties=<%= node[:cassandra][:passwd_properties] %>  \
<%- end %>
<%- if node[:cassandra][:access_properties] %>
      -Daccess.properties=<%= node[:cassandra][:access_properties] %>  \
<%- end %>
<%- if node[:cassandra][:enable_mx4j] %>
      -Dmx4jaddress=<%= node[:cassandra][:mx4j_listen_addr] %>  \
      -Dmx4jport=<%= node[:cassandra][:mx4j_listen_port] %>     \
<%- end %>
<%- if true %>
      -XX:+PrintGCTimeStamps                                    \
      -XX:+PrintTenuringDistribution                            \
      -XX:+TraceClassUnloading                                  \
      -XX:+PrintGCDetails                                       \
      -verbose:gc                                               \
      -Xloggc:/var/log/cassandra/cassandra-gc.log               \
<%- end %>
      -Djava.rmi.server.hostname=<%= node[:ec2][:public_hostname] %> \
      -Dcom.sun.management.jmxremote.port=<%= node[:cassandra][:jmx_port] %> \
      -Dcom.sun.management.jmxremote.ssl=false                  \
      -Dcom.sun.management.jmxremote.authenticate=false         \
      -Dcassandra-config=${CASSANDRA_CONF}                      \
      -Dcassandra-foreground=yes                                \
<%- if node[:kernel][:machine] == "x86_64" %>
      -XX:+UseCompressedOops                                    \
<%- end %>
      -Dlog4j.configuration=log4j-server.properties             \
      -cp ${CLASSPATH}                                          \
org.apache.cassandra.thrift.CassandraDaemon 2>&1
      

#     -XX:NewRatio=3                                            \

#       -XX:+AggressiveOpts                                       \
# <%- if false %>
#       -XX:+CMSIncrementalMode                                   \
#       -XX:+CMSIncrementalPacing                                 \
#       -XX:CMSIncrementalDutyCycleMin=0                          \
#       -XX:CMSIncrementalDutyCycle=10                            \
# <%- else %>
# <%- end %>
#
      
# # Very Large Heaps and Caches         http://www.devwebsphere.com/devwebsphere/2007/02/very_large_heap.htmla          ## great overview
# # Cassandra Garbage Collection Tuning http://blog.mikiobraun.de/2010/08/cassandra-gc-tuning.html
# # Garbage Collection FAQ              http://www.oracle.com/technetwork/java/faq-140837.html
# # Java HotSpot VM FAQ                 http://www.oracle.com/technetwork/java/hotspotfaq-138619.html
# # Turbocharging Java HotSpot VM       http://java.sun.com/developer/technicalArticles/Programming/turbo/
# # Java HotSpot VM Options             http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html
# # jvmstat FAQ                         http://www.oracle.com/technetwork/java/faq-141822.html
# # Tuning GC with JVM 1.4.2            http://www.oracle.com/technetwork/java/index-136692.html
# # Tuning Garbage Collection Outline   http://www.petefreitag.com/articles/gctuning/
# # Java Tuning White Paper             http://java.sun.com/performance/reference/whitepapers/tuning.html
# # GC Tuning in the HotSpot VM         http://www.slideshare.net/ludomp/gc-tuning-in-the-hotspot-java-vm-a-fisl-10-presentation
# #       
#
#   -XX:+UseCompressedOops                  ## Greatly improves memory consumption on 64-bit machines
#
# # Here are the main options for tuning the size of the young generation.
#   -XX:NewSize=21m                         ## Initial size of the young generation. (You may use suffixes such as m, g, e.g. -XX:NewSize=32m)
#   -XX:MaxNewSize=42m                      ## Maximal size of the young generation.
#   -XX:NewRatio=n                          ## sets the ratio of young generation to old generation to 1:n (for example n = 3 means you’ll have 25% new generation and 75% old generation.
#
# # The size of the survivor space and the migration is controlled by the following options:
#   -XX:SurvivorRatio=8                     ## sets the ratio of “young eden” to “young survivors” to 1:n.
#   -XX:MaxTenuringThreshold=1              ## controls at what age (that is, number of survived garbage collections) objects migrate to the old generation.
#
#   -XX:CMSInitiatingOccupancyFraction=pct  ## Controls the percentage of the old generation when the CMS is triggered.
#   -XX:+UseCMSInitiatingOccupancyOnly      ## ensures that the percentage is kept fixed.
#
# # for incremental mark-and-sweep
#   -XX:+UseConcMarkSweepGC                 \
#   -XX:+CMSIncrementalMode                 \
#   -XX:+CMSIncrementalPacing               \
#   -XX:CMSIncrementalDutyCycleMin=0        \
#   -XX:CMSIncrementalDutyCycle=10          \
#   -XX:ParallelCMSThreads=4                ## limit the number of threads used for iCMS
#
# # If too many full collections occur, try the following three steps, one at a time:
#   -XX:CMSIncrementalSafetyFactor=<N>      ## Increase the safety factor:
#   -XX:CMSIncrementalDutyCycleMin=<N>      ## Increase the minimum duty cycle:
#   -XX:-CMSIncrementalPacing               ## Disable automatic pacing and use a fixed duty cycle
#   -XX:CMSIncrementalDutyCycle=<N>
#
# # Log the GC info
#   -XX:+PrintGCTimeStamps                                    \
#   -XX:+PrintTenuringDistribution                            \
#   -XX:+TraceClassUnloading                                  \
#   -XX:+PrintGCDetails                                       \
#   -verbose:gc                                               \
#   -Xloggc:/var/log/cassandra/cassandra-gc.log               \
#

#   -XX:TargetSurvivorRatio=90              ##Allows 90% of the survivor spaces to be occupied instead of the default 50%, allowing better utilization of the survivor space memory. 
      
#
# If application has mid- or long-lived objects: Objects that survive a young
# generation collection have a copying cost (part of the algorithm for a young
# generation collection is to copy any objects that survive). Mid- or long-lived
# objects may be copied multiple times. Use -XX:MaxTenuringThreshold=0 to move an
# object that survives a young generation collection immediately to the tenured
# generation. If that improves the performance of the application, the copying
# of long-lived objects is significant.


